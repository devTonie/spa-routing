{"ast":null,"code":"var _jsxFileName = \"/Users/raman_simanenkau/Desktop/12-adv-starting-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = () => {\n  defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["/Users/raman_simanenkau/Desktop/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n  const events = data.events;\n\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport default EventsPage;\n\nconst loadEvents = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });\n  } else {\n    return response;\n  }\n};\n\nexport const loader = () => {\n  defer({\n    events: loadEvents(),\n  });\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AACvD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGT,aAAa,EAAE;EAC5B,MAAMU,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAC7B;AAEP;AAACP,EAAA,CATQD,UAAU;EAAA,QACJP,aAAa;AAAA;AAAAgB,EAAA,GADnBT,UAAU;AAWnB,eAAeA,UAAU;AAEzB,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMQ,MAAM,GAAGA,CAAA,KAAM;EAC1BzB,KAAK,CAAC;IACJS,MAAM,EAAEO,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}